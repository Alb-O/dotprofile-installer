{ pkgs, ... }:

# GC-safe, profile-based installer for flake packages
# - Installs to a per-program profile under $XDG_STATE_HOME/nix/profiles/programs
# - Writes a PATH snippet to $XDG_DATA_HOME/rc/<name>.sh
# - Supports --name, --flake, --attr, --profile-dir, and --uninstall
pkgs.writeShellScriptBin "dotprofile-installer" ''
    set -euo pipefail

    usage() {
      cat <<USAGE
  dotprofile-installer [--name NAME] [--flake REF|.] [--attr ATTR] [--profile-dir DIR] [--uninstall]

  Options:
    --name NAME        Logical program name (defaults to basename of flake dir)
    --flake REF        Flake ref or path (defaults to current directory)
    --attr ATTR        Package attribute (defaults to "default")
    --profile-dir DIR  Base directory for per-program profiles
                        (defaults to "''${XDG_STATE_HOME:-$HOME/.local/state}/nix/profiles/programs")
    --uninstall        Remove PATH snippet and profile for NAME
  USAGE
    }

    NAME=""
    FLAKE_REF=""
    ATTR="default"
    PROFILE_BASE="''${XDG_STATE_HOME:-$HOME/.local/state}/nix/profiles/programs"
    ACTION="install"

    while [ "$#" -gt 0 ]; do
      case "''${1}" in
        --name)
          NAME="''${2:-}"
          shift 2
          ;;
        --flake)
          FLAKE_REF="''${2:-}"
          shift 2
          ;;
        --attr)
          ATTR="''${2:-}"
          shift 2
          ;;
        --profile-dir)
          PROFILE_BASE="''${2:-}"
          shift 2
          ;;
        --uninstall)
          ACTION="uninstall"
          shift 1
          ;;
        -h|--help)
          usage; exit 0
          ;;
        *)
          echo "Unknown option: $1" >&2
          usage; exit 2
          ;;
      esac
    done

    # Determine flake reference
    if [ -z "''${FLAKE_REF}" ]; then
      if [ -f flake.nix ]; then
        FLAKE_REF="$(pwd)"
      else
        echo "Error: --flake not provided and no flake.nix in current directory" >&2
        exit 1
      fi
    fi

    # Determine NAME
    if [ -z "''${NAME}" ]; then
      # Default to basename of flake path/ref when it's a local path
      if [ -d "''${FLAKE_REF}" ] || [ "''${FLAKE_REF#./}" != "''${FLAKE_REF}" ] || [ "''${FLAKE_REF#/}" != "''${FLAKE_REF}" ]; then
        NAME="$(basename "''${FLAKE_REF}")"
      else
        # Fallback generic name
        NAME="package"
      fi
    fi

    XDG_DATA_HOME="''${XDG_DATA_HOME:-$HOME/.local/share}"
    RC_DIR="''${XDG_DATA_HOME}/rc"
    mkdir -p "''${RC_DIR}"

    PROFILE_DIR="''${PROFILE_BASE}"
    PROFILE_PATH="''${PROFILE_DIR}/''${NAME}"

    case "''${ACTION}" in
      install)
        echo "Installing ''${FLAKE_REF}#''${ATTR} into profile ''${PROFILE_PATH}"
        mkdir -p "''${PROFILE_DIR}"
        nix profile install --profile "''${PROFILE_PATH}" "''${FLAKE_REF}#''${ATTR}"

        # Write PATH export script
        RC_FILE="''${RC_DIR}/''${NAME}.sh"
        cat > "''${RC_FILE}" << EOF
  # Auto-generated by dotprofile-installer
  export PATH="''${PROFILE_PATH}/bin:\$PATH"
  EOF
        echo "PATH snippet written: ''${RC_FILE}"
        echo "Profile: ''${PROFILE_PATH}"
        echo "Binaries: $(ls -1 "''${PROFILE_PATH}/bin" 2>/dev/null | tr '\n' ' ' || echo 'none')"
        ;;

      uninstall)
        RC_FILE="''${RC_DIR}/''${NAME}.sh"
        if [ -f "''${RC_FILE}" ]; then
          rm -f "''${RC_FILE}"
          echo "Removed PATH snippet: ''${RC_FILE}"
        else
          echo "No PATH snippet found at: ''${RC_FILE}"
        fi

        # Only wipe the profile if it sits under PROFILE_BASE to avoid accidents
        case "''${PROFILE_PATH}" in
          "''${PROFILE_DIR}"/*)
            if [ -e "''${PROFILE_PATH}" ]; then
              echo "Wiping profile generations: ''${PROFILE_PATH}"
              nix profile wipe-history --profile "''${PROFILE_PATH}" || true
              rm -rf "''${PROFILE_PATH}"
              echo "Removed profile directory: ''${PROFILE_PATH}"
            else
              echo "No profile found at: ''${PROFILE_PATH}"
            fi
            ;;
          *)
            echo "Refusing to remove profile outside base: ''${PROFILE_PATH}" >&2
            ;;
        esac
        ;;
    esac
''
