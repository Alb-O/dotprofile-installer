{ pkgs, ... }:

# Generic dotprofile installer that works with any flake
# Creates a PATH script for the flake's default package in $XDG_DATA_HOME/rc/
pkgs.writeShellScriptBin "dotprofile-installer" ''
  set -euo pipefail

  # Get the directory where this script is being run from
  if [ -f flake.nix ]; then
    FLAKE_DIR="$(pwd)"
  else
    echo "Error: Must be run from a directory containing flake.nix"
    exit 1
  fi

  # Create unique temporary file based on flake directory hash
  FLAKE_HASH="$(echo "$FLAKE_DIR" | sha256sum | cut -d' ' -f1 | head -c 8)"
  TEMP_LINK="/tmp/flake-default-package-$FLAKE_HASH-$$"

  # Get the default package from the current flake
  echo "Building default package..."
  nix build "$FLAKE_DIR#default" --out-link "$TEMP_LINK"
  DEFAULT_PACKAGE="$(readlink -f "$TEMP_LINK")"

  # Get XDG_DATA_HOME or default
  XDG_DATA_HOME=''${XDG_DATA_HOME:-$HOME/.local/share}
  RC_DIR="$XDG_DATA_HOME/rc"

  # Create rc directory if it doesn't exist
  mkdir -p "$RC_DIR"

  # Extract package name from the store path
  # Remove hash prefix and take first component before any version numbers
  STORE_NAME="$(basename "$DEFAULT_PACKAGE")"
  PACKAGE_NAME="$(echo "$STORE_NAME" | sed 's/^[^-]*-//' | sed 's/-[0-9].*//' | sed 's/-nightly.*//' | sed 's/-unwrapped.*//')"

  # Write the PATH export script
  cat > "$RC_DIR/$PACKAGE_NAME.sh" << EOF
# Auto-generated by $PACKAGE_NAME flake via dotprofile-installer
export PATH="$DEFAULT_PACKAGE/bin:\$PATH"
EOF

  echo "PATH script written to $RC_DIR/$PACKAGE_NAME.sh"
  echo "Package: $PACKAGE_NAME"
  echo "Store path: $DEFAULT_PACKAGE"

  # Try to show version information by checking common version flags
  VERSION_FOUND=false
  for binary in "$DEFAULT_PACKAGE/bin/"*; do
    if [ -x "$binary" ]; then
      BINARY_NAME="$(basename "$binary")"
      for flag in "--version" "-V" "-v" "version"; do
        if VERSION_OUTPUT="$("$binary" "$flag" 2>/dev/null | head -1)" && [ -n "$VERSION_OUTPUT" ]; then
          echo "Version ($BINARY_NAME): $VERSION_OUTPUT"
          VERSION_FOUND=true
          break 2
        fi
      done
    fi
  done

  if [ "$VERSION_FOUND" = false ]; then
    echo "Available binaries: $(ls "$DEFAULT_PACKAGE/bin/" 2>/dev/null | tr '\n' ' ' || echo 'none found')"
  fi

  # Clean up temp link
  rm -f "$TEMP_LINK"
''
